service: portfolio-backend
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  region: ap-southeast-2
  stackName: portfolio-site

  environment:
    TABLE_PREFIX: ${self:custom.tablePrefix}

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:Scan"
          Resource:
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.tablePrefix}*"
      
package:
  individually: true

plugins:
  - serverless-s3-sync
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline # must appear last!

custom:
  tablePrefix: portfolio-${sls:stage}

  serverless-offline:
    httpPort: 8000

  s3Sync:
    - bucketNameKey: FrontendBucketKey
      localDir: ../frontend/build/

  dynamodb:
    stages:
      - dev
    start:
      port: 8001
      migrate: true
      seed: true
      inMemory: true
    seed:
      dev:
        sources:
          - table: ${self:custom.tablePrefix}-about
            sources: [./seed/about.json]
          - table: ${self:custom.tablePrefix}-projects
            sources: [./seed/projects.json]

functions:
  get-blob:
    handler: src/getBlob.handler
    events:
      - httpApi:
          path: /blob
          method: get

resources:
  Resources:
    FrontendBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        Tags:
          - Key: 'project'
            Value: portfolio-${sls:stage}

    originAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: OAI for accessing portfolio frontend bucket
    
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: 's3:GetObject'
              Principal:
                CanonicalUser: !GetAtt originAccessIdentity.S3CanonicalUserId
              Resource: !Join
                - ""
                - - !GetAtt FrontendBucket.Arn
                  - "/*"
        Bucket: !Ref FrontendBucket

    # https://github.com/awslabs/aws-cloudformation-templates/blob/master/community/solutions/StaticS3CloudFront.yml
    Distribution:
        Type: AWS::CloudFront::Distribution
        DependsOn: OriginAccessIdentity
        Properties:
          DistributionConfig:
            Origins:
            - DomainName: !GetAtt FrontendBucket.DomainName
              Id: frontend
              S3OriginConfig:
                OriginAccessIdentity: !Join 
                  - /
                  - - origin-access-identity
                    - cloudfront
                    - !Ref originAccessIdentity
            # TODO: API origin
            Enabled: 'true'
            DefaultRootObject: index.html
            # Aliases:
            # - niccannon.com
            # - www.niccannon.com
            DefaultCacheBehavior:
              AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              TargetOriginId: frontend
              ForwardedValues:
                QueryString: 'false'
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
              MinTTL: 0
              MaxTTL: 3600
              DefaultTTL: 3600
            # TODO: CacheBehaviours:
            CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 404
              ResponsePagePath: "/index.html"
            Restrictions:
              GeoRestriction:
                RestrictionType: none
            ViewerCertificate:
              # TODO: Setup with ACM cert
              CloudFrontDefaultCertificate: 'true'

    AboutTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    ProjectsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tablePrefix}-projects
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

  Outputs:
    FrontendUrl:
      Value: !GetAtt Distribution.DomainName

    FrontendBucketKey:
      Value: !Ref FrontendBucket
