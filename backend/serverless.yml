service: portfolio-backend
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  region: ap-southeast-2
  stackName: portfolio-site

  environment:
    TABLE_PREFIX: ${self:custom.tablePrefix}

  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:Scan"
          Resource:
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.tablePrefix}*"
      
package:
  individually: true

plugins:
  - serverless-s3-sync
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline # must appear last!

custom:
  tablePrefix: portfolio-${sls:stage}
  feBucketName: portfolio-frontend-${sls:stage}-a23rfd

  serverless-offline:
    httpPort: 8000

  s3Sync:
    - bucketName: ${self:custom.feBucketName}
      localDir: ../frontend/build/

  dynamodb:
    stages:
      - dev
    start:
      port: 8080
      migrate: true
      seed: true
      inMemory: true
    seed:
      dev:
        sources:
          - table: ${self:custom.tablePrefix}-about
            sources: [./seed/about.json]
          - table: ${self:custom.tablePrefix}-projects
            sources: [./seed/projects.json]

functions:
  get-blob:
    handler: src/getBlob.handler
    events:
      - httpApi:
          path: /blob
          method: get

resources:
  Resources:

    FrontendBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.feBucketName}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html
        Tags:
          - Key: 'project'
            Value: portfolio-${sls:stage}
      DeletionPolicy: Retain

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: !Join 
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref FrontendBucket
                  - /*
        Bucket: !Ref FrontendBucket

    # originAccessIdentity:
    #   Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    #   Properties:
    #     CloudFrontOriginAccessIdentityConfig:
    #       Comment: OAI for accessing portfolio frontend bucket
    
    # BucketPolicy:
    #   Type: AWS::S3::BucketPolicy
    #   Properties:
    #     PolicyDocument:
    #       Version: '2012-10-17'
    #       Statement:
    #         - Effect: Allow
    #           Action: 's3:GetObject'
    #           Resource: !Join
    #             - ""
    #             - - !GetAtt FrontendBucket.Arn
    #               - "/*"
    #       Principal:
    #         CanonicalUser: !GetAtt originAccessIdentity.S3CanonicalUserId
    #     Bucket: !Ref FrontendBucket

    AboutTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tablePrefix}-about
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    ProjectsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tablePrefix}-projects
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

  Outputs:
    FrontendUrl:
      Value: !GetAtt FrontendBucket.WebsiteURL
